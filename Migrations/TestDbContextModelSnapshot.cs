// <auto-generated />
using System;
using System.Collections.Generic;
using DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ListChangeTracking.Migrations
{
    [DbContext(typeof(TestDbContext))]
    partial class TestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.OtherEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OtherEntity");
                });

            modelBuilder.Entity("Entities.TestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("ValueObject", "Entities.TestEntity.ValueObject#TestValueObject", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Name");

                            b1.Property<int>("Price")
                                .HasColumnType("integer")
                                .HasColumnName("Price");

                            b1.ComplexProperty<Dictionary<string, object>>("NestedValueObject", "Entities.TestEntity.ValueObject#TestValueObject.NestedValueObject#NestedValueObject", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Value1")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("Value1");

                                    b2.Property<string>("Value2")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("Value2");
                                });
                        });

                    b.HasKey("Id");

                    b.ToTable("TestEntities", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("TestEntity_Name");
                        });
                });

            modelBuilder.Entity("Entities.TestEntityOtherEntity", b =>
                {
                    b.Property<Guid>("TestEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OtherEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("TestEntityId", "OtherEntityId");

                    b.HasIndex("OtherEntityId");

                    b.ToTable("TestEntityOtherEntity");
                });

            modelBuilder.Entity("Entities.TestEntity", b =>
                {
                    b.OwnsMany("Entities.InnerEntity", "InnerEntities", b1 =>
                        {
                            b1.Property<Guid>("TestEntityId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Quantity")
                                .HasColumnType("integer");

                            b1.HasKey("TestEntityId", "Id");

                            b1.ToTable("InnerEntity");

                            b1.WithOwner("TestEntity")
                                .HasForeignKey("TestEntityId");

                            b1.Navigation("TestEntity");
                        });

                    b.Navigation("InnerEntities");
                });

            modelBuilder.Entity("Entities.TestEntityOtherEntity", b =>
                {
                    b.HasOne("Entities.OtherEntity", "OtherEntity")
                        .WithMany("TestEntityOtherEntities")
                        .HasForeignKey("OtherEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.TestEntity", "TestEntity")
                        .WithMany("TestEntityOtherEntities")
                        .HasForeignKey("TestEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OtherEntity");

                    b.Navigation("TestEntity");
                });

            modelBuilder.Entity("Entities.OtherEntity", b =>
                {
                    b.Navigation("TestEntityOtherEntities");
                });

            modelBuilder.Entity("Entities.TestEntity", b =>
                {
                    b.Navigation("TestEntityOtherEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
